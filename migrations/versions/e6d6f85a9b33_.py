"""empty message

Revision ID: e6d6f85a9b33
Revises: 679d642d627f
Create Date: 2017-08-17 16:46:04.294302

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = 'e6d6f85a9b33'
down_revision = '679d642d627f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('BSConfig', sa.Column('BSID', sa.Integer(), nullable=False))
    op.add_column('BSConfig', sa.Column('BSIP1', sa.String(length=64), nullable=True))
    op.add_column('BSConfig', sa.Column('BSIP2', sa.String(length=64), nullable=True))
    op.add_column('BSConfig', sa.Column('BSPort1', sa.Integer(), nullable=True))
    op.add_column('BSConfig', sa.Column('BSPort2', sa.Integer(), nullable=True))
    op.add_column('BSConfig', sa.Column('TRXNum', sa.Integer(), nullable=True))
    op.drop_index('bsip1', table_name='BSConfig')
    op.drop_index('bsip2', table_name='BSConfig')
    op.create_unique_constraint(None, 'BSConfig', ['BSIP1'])
    op.create_unique_constraint(None, 'BSConfig', ['BSIP2'])
    op.drop_column('BSConfig', 'bsip2')
    op.drop_column('BSConfig', 'bsip1')
    op.drop_column('BSConfig', 'bsid')
    op.drop_column('BSConfig', 'bsPort1')
    op.drop_column('BSConfig', 'bsPort2')
    op.drop_column('BSConfig', 'trxNum')
    op.add_column('SSConfig', sa.Column('TRX_ID', sa.Integer(), nullable=True))
    op.add_column('SSConfig', sa.Column('ssDataRate', sa.Integer(), nullable=True))
    op.add_column('SSConfig', sa.Column('ssFreq', sa.Float(), nullable=True))
    op.add_column('SSConfig', sa.Column('ssID', sa.Integer(), nullable=False))
    op.add_column('SSConfig', sa.Column('ssIP', sa.String(length=64), nullable=True))
    op.add_column('SSConfig', sa.Column('ssTxPower', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'SSConfig', 'TrxConfig', ['TRX_ID'], ['TRXID'])
    op.drop_column('SSConfig', 'ssIp')
    op.drop_column('SSConfig', 'ss1')
    op.drop_column('SSConfig', 'ssId')
    op.drop_column('SSConfig', 'ss2')
    op.add_column('TrxConfig', sa.Column('BS_ID', sa.Integer(), nullable=True))
    op.add_column('TrxConfig', sa.Column('SSNum', sa.Integer(), nullable=True))
    op.add_column('TrxConfig', sa.Column('TRXDataRate', sa.Integer(), nullable=True))
    op.add_column('TrxConfig', sa.Column('TRXFreq', sa.Integer(), nullable=True))
    op.add_column('TrxConfig', sa.Column('TRXID', sa.Integer(), nullable=False))
    op.add_column('TrxConfig', sa.Column('TRXIP', sa.String(length=64), nullable=True))
    op.add_column('TrxConfig', sa.Column('TRXPort', sa.Integer(), nullable=True))
    op.add_column('TrxConfig', sa.Column('TRXTxPower', sa.Integer(), nullable=True))
    op.drop_constraint(u'TrxConfig_ibfk_1', 'TrxConfig', type_='foreignkey')
    op.create_foreign_key(None, 'TrxConfig', 'BSConfig', ['BS_ID'], ['BSID'])
    op.drop_column('TrxConfig', 'trxTxPower')
    op.drop_column('TrxConfig', 'ssNum')
    op.drop_column('TrxConfig', 'trxIp')
    op.drop_column('TrxConfig', 'trxPort')
    op.drop_column('TrxConfig', 'trxDataRate')
    op.drop_column('TrxConfig', 'bs_id')
    op.drop_column('TrxConfig', 'trxId')
    op.drop_column('TrxConfig', 'trxFreq')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('TrxConfig', sa.Column('trxFreq', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.add_column('TrxConfig', sa.Column('trxId', mysql.INTEGER(display_width=11), nullable=False))
    op.add_column('TrxConfig', sa.Column('bs_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.add_column('TrxConfig', sa.Column('trxDataRate', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.add_column('TrxConfig', sa.Column('trxPort', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.add_column('TrxConfig', sa.Column('trxIp', mysql.VARCHAR(length=64), nullable=True))
    op.add_column('TrxConfig', sa.Column('ssNum', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.add_column('TrxConfig', sa.Column('trxTxPower', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'TrxConfig', type_='foreignkey')
    op.create_foreign_key(u'TrxConfig_ibfk_1', 'TrxConfig', 'BSConfig', ['bs_id'], ['bsid'])
    op.drop_column('TrxConfig', 'TRXTxPower')
    op.drop_column('TrxConfig', 'TRXPort')
    op.drop_column('TrxConfig', 'TRXIP')
    op.drop_column('TrxConfig', 'TRXID')
    op.drop_column('TrxConfig', 'TRXFreq')
    op.drop_column('TrxConfig', 'TRXDataRate')
    op.drop_column('TrxConfig', 'SSNum')
    op.drop_column('TrxConfig', 'BS_ID')
    op.add_column('SSConfig', sa.Column('ss2', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.add_column('SSConfig', sa.Column('ssId', mysql.INTEGER(display_width=11), nullable=False))
    op.add_column('SSConfig', sa.Column('ss1', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.add_column('SSConfig', sa.Column('ssIp', mysql.VARCHAR(length=64), nullable=True))
    op.drop_constraint(None, 'SSConfig', type_='foreignkey')
    op.drop_column('SSConfig', 'ssTxPower')
    op.drop_column('SSConfig', 'ssIP')
    op.drop_column('SSConfig', 'ssID')
    op.drop_column('SSConfig', 'ssFreq')
    op.drop_column('SSConfig', 'ssDataRate')
    op.drop_column('SSConfig', 'TRX_ID')
    op.add_column('BSConfig', sa.Column('trxNum', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.add_column('BSConfig', sa.Column('bsPort2', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.add_column('BSConfig', sa.Column('bsPort1', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.add_column('BSConfig', sa.Column('bsid', mysql.INTEGER(display_width=11), nullable=False))
    op.add_column('BSConfig', sa.Column('bsip1', mysql.VARCHAR(length=64), nullable=True))
    op.add_column('BSConfig', sa.Column('bsip2', mysql.VARCHAR(length=64), nullable=True))
    op.drop_constraint(None, 'BSConfig', type_='unique')
    op.drop_constraint(None, 'BSConfig', type_='unique')
    op.create_index('bsip2', 'BSConfig', ['bsip2'], unique=True)
    op.create_index('bsip1', 'BSConfig', ['bsip1'], unique=True)
    op.drop_column('BSConfig', 'TRXNum')
    op.drop_column('BSConfig', 'BSPort2')
    op.drop_column('BSConfig', 'BSPort1')
    op.drop_column('BSConfig', 'BSIP2')
    op.drop_column('BSConfig', 'BSIP1')
    op.drop_column('BSConfig', 'BSID')
    # ### end Alembic commands ###
